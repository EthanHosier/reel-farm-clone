openapi: 3.0.3
info:
  title: Reel Farm API
  description: API for Reel Farm application
  version: 1.0.0
  contact:
    name: Ethan Hosier
    email: ethanjhosier@gmail.com

servers:
  - url: http://localhost:3000/api
    description: Local development server
  - url: https://d5r5yt3xtqwov.cloudfront.net/api
    description: Production server

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Returns the health status of the API
      operationId: getHealth
      tags:
        - Health
      responses:
        "200":
          description: API is healthy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /user:
    get:
      summary: Get current user account
      description: Retrieves the authenticated user's account information
      operationId: getUserAccount
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User account retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAccount"
        "401":
          description: Unauthorized - invalid or missing token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User account not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /hooks/generate:
    post:
      summary: Generate hooks for TikTok slideshow
      description: Generates creative hooks for a TikTok slideshow based on a prompt
      operationId: generateHooks
      tags:
        - Hooks
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenerateHooksRequest"
      responses:
        "200":
          description: Hooks generated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenerateHooksResponse"
        "401":
          description: Unauthorized - invalid or missing token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          description: Bad request - invalid request data or insufficient credits
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /hooks:
    get:
      summary: Get user's hooks
      description: Retrieves hooks generated by the authenticated user with pagination
      operationId: getHooks
      tags:
        - Hooks
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of hooks to return
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Number of hooks to skip
      responses:
        "200":
          description: Hooks retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetHooksResponse"
        "401":
          description: Unauthorized - invalid or missing token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /hooks/bulk:
    delete:
      summary: Delete multiple hooks
      description: Deletes multiple hooks by ID (only if they belong to the authenticated user)
      operationId: deleteHooksBulk
      tags:
        - Hooks
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - hook_ids
              properties:
                hook_ids:
                  type: array
                  items:
                    type: string
                    format: uuid
                  description: Array of hook IDs to delete
                  minItems: 1
      responses:
        "200":
          description: Hooks deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Successfully deleted hooks"
                  deleted_count:
                    type: integer
                    description: Number of hooks successfully deleted
                  deleted_ids:
                    type: array
                    items:
                      type: string
                      format: uuid
                    description: Array of successfully deleted hook IDs
        "400":
          description: Bad request - invalid hook IDs or empty array
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized - invalid or missing token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /hooks/{hookId}:
    delete:
      summary: Delete a hook
      description: Deletes a specific hook by ID (only if it belongs to the authenticated user)
      operationId: deleteHook
      tags:
        - Hooks
      security:
        - bearerAuth: []
      parameters:
        - name: hookId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the hook to delete
      responses:
        "200":
          description: Hook deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Hook deleted successfully"
        "401":
          description: Unauthorized - invalid or missing token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Hook not found or doesn't belong to user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /subscription/create-checkout-session:
    post:
      summary: Create Stripe checkout session
      description: Creates a Stripe checkout session for subscription upgrade
      operationId: createCheckoutSession
      tags:
        - Subscriptions
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCheckoutSessionRequest"
      responses:
        "200":
          description: Checkout session created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckoutSessionResponse"
        "401":
          description: Unauthorized - invalid or missing token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          description: Bad request - invalid request data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /subscription/customer-portal:
    post:
      summary: Create customer portal session
      description: Creates a Stripe customer portal session for subscription management
      operationId: createCustomerPortalSession
      tags:
        - Subscriptions
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCustomerPortalRequest"
      responses:
        "200":
          description: Customer portal session created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerPortalResponse"
        "401":
          description: Unauthorized - invalid or missing token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          description: Bad request - user not found or no Stripe customer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /ai-avatar/videos:
    get:
      summary: Get all AI avatar videos
      description: Retrieves all AI avatar videos with thumbnails for gallery view
      operationId: getAIAvatarVideos
      tags:
        - AI Avatar
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Videos retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AIAvatarVideosResponse"
        "401":
          description: Unauthorized - invalid or missing token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /user-generated-videos:
    get:
      summary: Get user-generated videos
      description: Retrieves all user-generated videos for the authenticated user
      operationId: getUserGeneratedVideos
      tags:
        - User Generated Videos
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User-generated videos retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGeneratedVideosResponse"
        "401":
          description: Unauthorized - invalid or missing token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      summary: Generate a video with text overlay
      description: Creates a new user-generated video by adding text overlay to an existing AI avatar video
      operationId: createUserGeneratedVideo
      tags:
        - User Generated Videos
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserGeneratedVideoRequest"
      responses:
        "201":
          description: Video generated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGeneratedVideoResponse"
        "400":
          description: Bad request - invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized - invalid or missing token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: AI avatar video not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication
  schemas:
    HealthResponse:
      type: object
      required:
        - message
        - status
        - port
      properties:
        message:
          type: string
          example: "Reel Farm API is healthy!"
        status:
          type: string
          example: "ok"
        port:
          type: string
          example: "3000"

    UserAccount:
      type: object
      required:
        - id
        - plan
        - plan_started_at
        - credits
        - created_at
        - updated_at
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user account
          example: "123e4567-e89b-12d3-a456-426614174000"
        plan:
          type: string
          description: User's subscription plan
          example: "free"
        plan_started_at:
          type: string
          format: date-time
          description: When the current plan started
          example: "2024-01-01T00:00:00Z"
        plan_ends_at:
          type: string
          format: date-time
          nullable: true
          description: When the current plan ends (null for free plans)
          example: "2024-12-31T23:59:59Z"
        credits:
          type: integer
          minimum: 0
          description: Number of credits available to the user
          example: 100
        billing_customer_id:
          type: string
          nullable: true
          description: External billing system customer ID
          example: "cus_1234567890"
        created_at:
          type: string
          format: date-time
          description: When the account was created
          example: "2024-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: When the account was last updated
          example: "2024-01-01T00:00:00Z"

    ErrorResponse:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          description: Error type
          example: "validation_error"
        message:
          type: string
          description: Human-readable error message
          example: "Invalid user ID format"
        details:
          type: object
          description: Additional error details
          additionalProperties: true

    CreateCheckoutSessionRequest:
      type: object
      required:
        - price_id
        - success_url
        - cancel_url
      properties:
        price_id:
          type: string
          description: Stripe price ID for the subscription
          example: "price_1SKOuPLa4pEqShgojlivZTLc"
        success_url:
          type: string
          description: URL to redirect to after successful payment
          example: "https://reel-farm-clone-frontend.vercel.app/dashboard?success=true"
        cancel_url:
          type: string
          description: URL to redirect to if payment is canceled
          example: "https://reel-farm-clone-frontend.vercel.app/dashboard?canceled=true"

    CreateCustomerPortalRequest:
      type: object
      required:
        - return_url
      properties:
        return_url:
          type: string
          description: URL to redirect to after managing subscription
          example: "https://reel-farm-clone-frontend.vercel.app/dashboard"

    CheckoutSessionResponse:
      type: object
      required:
        - checkout_url
      properties:
        checkout_url:
          type: string
          description: Stripe checkout session URL
          example: "https://checkout.stripe.com/c/pay/cs_test_..."

    CustomerPortalResponse:
      type: object
      required:
        - portal_url
      properties:
        portal_url:
          type: string
          description: Stripe customer portal URL
          example: "https://billing.stripe.com/p/session_..."

    GenerateHooksRequest:
      type: object
      required:
        - prompt
        - num_hooks
      properties:
        prompt:
          type: string
          description: The topic or theme for generating hooks
          example: "Plants dying in my house"
        num_hooks:
          type: integer
          minimum: 1
          maximum: 10
          description: Number of hooks to generate
          example: 3

    GenerateHooksResponse:
      type: object
      required:
        - hooks
      properties:
        hooks:
          type: array
          items:
            $ref: "#/components/schemas/Hook"
          description: Array of generated hooks with IDs
          example:
            [
              {
                "id": "123e4567-e89b-12d3-a456-426614174000",
                "text": "5 things I wish I knew before killing my plants",
              },
              {
                "id": "123e4567-e89b-12d3-a456-426614174001",
                "text": "um so why did it take a plant expert explaining to me that traditional planters are so expensive just to constantly water plants...",
              },
              {
                "id": "123e4567-e89b-12d3-a456-426614174002",
                "text": "fun fact you're probably spending way too much time and money on watering your plants when you don't need to",
              },
            ]

    Hook:
      type: object
      required:
        - id
        - text
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the hook
          example: "123e4567-e89b-12d3-a456-426614174000"
        text:
          type: string
          description: The hook text content
          example: "5 things I wish I knew before killing my plants"

    AIAvatarVideo:
      type: object
      required:
        - id
        - title
        - video_url
        - thumbnail_url
        - updated_at
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the video
          example: "f310a473-df50-1bc0-60af-726147adcd4d"
        title:
          type: string
          description: Video title
          example: "AI Avatar Video 1"
        video_url:
          type: string
          description: CloudFront URL for video download
          example: "https://d1234567890.cloudfront.net/ai-avatar/videos/f310a473-df50-1bc0-60af-726147adcd4d.mp4"
        thumbnail_url:
          type: string
          description: CloudFront URL for thumbnail
          example: "https://d1234567890.cloudfront.net/ai-avatar/thumbnails/f310a473-df50-1bc0-60af-726147adcd4d.jpg"
        updated_at:
          type: string
          format: date-time
          description: When the video was last updated
          example: "2025-01-20T12:00:00Z"

    GetHooksResponse:
      type: object
      required:
        - hooks
        - total_count
      properties:
        hooks:
          type: array
          items:
            $ref: "#/components/schemas/Hook"
          description: Array of user's hooks
        total_count:
          type: integer
          minimum: 0
          description: Total number of hooks for the user
          example: 25
        title:
          type: string
          description: Video title
          example: "AI Avatar Video 1"
        video_url:
          type: string
          description: CloudFront URL for video download
          example: "https://d1234567890.cloudfront.net/ai-avatar/videos/f310a473-df50-1bc0-60af-726147adcd4d.mp4"
        thumbnail_url:
          type: string
          description: CloudFront URL for thumbnail
          example: "https://d1234567890.cloudfront.net/ai-avatar/thumbnails/f310a473-df50-1bc0-60af-726147adcd4d.jpg"
        updated_at:
          type: string
          format: date-time
          description: When the video was last updated
          example: "2025-01-20T12:00:00Z"

    AIAvatarVideosResponse:
      type: object
      required:
        - videos
      properties:
        videos:
          type: array
          items:
            $ref: "#/components/schemas/AIAvatarVideo"
          description: List of AI avatar videos

    CreateUserGeneratedVideoRequest:
      type: object
      required:
        - ai_avatar_video_id
        - overlay_text
      properties:
        ai_avatar_video_id:
          type: string
          format: uuid
          description: ID of the AI avatar video to use as base
          example: "f310a473-df50-1bc0-60af-726147adcd4d"
        overlay_text:
          type: string
          description: Text to overlay on the video
          example: "Check out this amazing content!"
          maxLength: 500

    UserGeneratedVideo:
      type: object
      required:
        - id
        - user_id
        - ai_avatar_video_id
        - overlay_text
        - video_url
        - thumbnail_url
        - status
        - created_at
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user-generated video
          example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
        user_id:
          type: string
          format: uuid
          description: ID of the user who generated the video
          example: "12345678-1234-1234-1234-123456789012"
        ai_avatar_video_id:
          type: string
          format: uuid
          description: ID of the original AI avatar video
          example: "f310a473-df50-1bc0-60af-726147adcd4d"
        overlay_text:
          type: string
          description: Text that was overlaid on the video
          example: "Check out this amazing content!"
        video_url:
          type: string
          description: CloudFront URL for the generated video
          example: "https://d1234567890.cloudfront.net/user-generated-videos/a1b2c3d4-e5f6-7890-abcd-ef1234567890.mp4"
        thumbnail_url:
          type: string
          description: CloudFront URL for the video thumbnail
          example: "https://d1234567890.cloudfront.net/user-generated-videos/a1b2c3d4-e5f6-7890-abcd-ef1234567890.jpg"
        status:
          type: string
          enum: [processing, completed, failed]
          description: Current processing status
          example: "completed"
        created_at:
          type: string
          format: date-time
          description: When the video was created
          example: "2025-01-20T12:00:00Z"

    UserGeneratedVideoResponse:
      type: object
      required:
        - video
      properties:
        video:
          $ref: "#/components/schemas/UserGeneratedVideo"

    UserGeneratedVideosResponse:
      type: object
      required:
        - videos
      properties:
        videos:
          type: array
          items:
            $ref: "#/components/schemas/UserGeneratedVideo"
          description: List of user-generated videos

tags:
  - name: Health
    description: Health check endpoints
  - name: Users
    description: User account management
  - name: Hooks
    description: Hook generation for TikTok slideshows
  - name: Subscriptions
    description: Subscription and billing management
  - name: AI Avatar
    description: AI avatar video management
  - name: User Generated Videos
    description: User-generated video creation and management
