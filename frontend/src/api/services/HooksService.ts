/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { GenerateHooksRequest } from '../models/GenerateHooksRequest';
import type { GenerateHooksResponse } from '../models/GenerateHooksResponse';
import type { GetHooksResponse } from '../models/GetHooksResponse';
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class HooksService {
    /**
     * Generate hooks for TikTok slideshow
     * Generates creative hooks for a TikTok slideshow based on a prompt
     * @param requestBody
     * @returns GenerateHooksResponse Hooks generated successfully
     * @throws ApiError
     */
    public static generateHooks(
        requestBody: GenerateHooksRequest,
    ): CancelablePromise<GenerateHooksResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/hooks/generate',
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Bad request - invalid request data or insufficient credits`,
                401: `Unauthorized - invalid or missing token`,
                500: `Internal server error`,
            },
        });
    }
    /**
     * Get user's hooks
     * Retrieves hooks generated by the authenticated user with pagination
     * @param limit Number of hooks to return
     * @param offset Number of hooks to skip
     * @returns GetHooksResponse Hooks retrieved successfully
     * @throws ApiError
     */
    public static getHooks(
        limit: number = 20,
        offset?: number,
    ): CancelablePromise<GetHooksResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/hooks',
            query: {
                'limit': limit,
                'offset': offset,
            },
            errors: {
                401: `Unauthorized - invalid or missing token`,
                500: `Internal server error`,
            },
        });
    }
    /**
     * Delete a hook
     * Deletes a specific hook by ID (only if it belongs to the authenticated user)
     * @param hookId The ID of the hook to delete
     * @returns any Hook deleted successfully
     * @throws ApiError
     */
    public static deleteHook(
        hookId: string,
    ): CancelablePromise<{
        message?: string;
    }> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/hooks/{hookId}',
            path: {
                'hookId': hookId,
            },
            errors: {
                401: `Unauthorized - invalid or missing token`,
                404: `Hook not found or doesn't belong to user`,
                500: `Internal server error`,
            },
        });
    }
}
