//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// AIAvatarVideo defines model for AIAvatarVideo.
type AIAvatarVideo struct {
	// Id Unique identifier for the video
	Id openapi_types.UUID `json:"id"`

	// ThumbnailUrl CloudFront URL for thumbnail
	ThumbnailUrl string `json:"thumbnail_url"`

	// Title Video title
	Title string `json:"title"`

	// UpdatedAt When the video was last updated
	UpdatedAt time.Time `json:"updated_at"`

	// VideoUrl CloudFront URL for video download
	VideoUrl string `json:"video_url"`
}

// AIAvatarVideosResponse defines model for AIAvatarVideosResponse.
type AIAvatarVideosResponse struct {
	// Videos List of AI avatar videos
	Videos []AIAvatarVideo `json:"videos"`
}

// CheckoutSessionResponse defines model for CheckoutSessionResponse.
type CheckoutSessionResponse struct {
	// CheckoutUrl Stripe checkout session URL
	CheckoutUrl string `json:"checkout_url"`
}

// CreateCheckoutSessionRequest defines model for CreateCheckoutSessionRequest.
type CreateCheckoutSessionRequest struct {
	// CancelUrl URL to redirect to if payment is canceled
	CancelUrl string `json:"cancel_url"`

	// PriceId Stripe price ID for the subscription
	PriceId string `json:"price_id"`

	// SuccessUrl URL to redirect to after successful payment
	SuccessUrl string `json:"success_url"`
}

// CreateCustomerPortalRequest defines model for CreateCustomerPortalRequest.
type CreateCustomerPortalRequest struct {
	// ReturnUrl URL to redirect to after managing subscription
	ReturnUrl string `json:"return_url"`
}

// CustomerPortalResponse defines model for CustomerPortalResponse.
type CustomerPortalResponse struct {
	// PortalUrl Stripe customer portal URL
	PortalUrl string `json:"portal_url"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Details Additional error details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error Error type
	Error string `json:"error"`

	// Message Human-readable error message
	Message string `json:"message"`
}

// GenerateHooksRequest defines model for GenerateHooksRequest.
type GenerateHooksRequest struct {
	// NumHooks Number of hooks to generate
	NumHooks int `json:"num_hooks"`

	// Prompt The topic or theme for generating hooks
	Prompt string `json:"prompt"`
}

// GenerateHooksResponse defines model for GenerateHooksResponse.
type GenerateHooksResponse struct {
	// Hooks Array of generated hooks with IDs
	Hooks []Hook `json:"hooks"`
}

// GetHooksResponse defines model for GetHooksResponse.
type GetHooksResponse struct {
	// Hooks Array of user's hooks
	Hooks []Hook `json:"hooks"`

	// TotalCount Total number of hooks for the user
	TotalCount int `json:"total_count"`
}

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	Message string `json:"message"`
	Port    string `json:"port"`
	Status  string `json:"status"`
}

// Hook defines model for Hook.
type Hook struct {
	// Id Unique identifier for the hook
	Id openapi_types.UUID `json:"id"`

	// Text The hook text content
	Text string `json:"text"`
}

// UserAccount defines model for UserAccount.
type UserAccount struct {
	// BillingCustomerId External billing system customer ID
	BillingCustomerId *string `json:"billing_customer_id"`

	// CreatedAt When the account was created
	CreatedAt time.Time `json:"created_at"`

	// Credits Number of credits available to the user
	Credits int `json:"credits"`

	// Id Unique identifier for the user account
	Id openapi_types.UUID `json:"id"`

	// Plan User's subscription plan
	Plan string `json:"plan"`

	// PlanEndsAt When the current plan ends (null for free plans)
	PlanEndsAt *time.Time `json:"plan_ends_at"`

	// PlanStartedAt When the current plan started
	PlanStartedAt time.Time `json:"plan_started_at"`

	// UpdatedAt When the account was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// GetHooksParams defines parameters for GetHooks.
type GetHooksParams struct {
	// Limit Number of hooks to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of hooks to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GenerateHooksJSONRequestBody defines body for GenerateHooks for application/json ContentType.
type GenerateHooksJSONRequestBody = GenerateHooksRequest

// CreateCheckoutSessionJSONRequestBody defines body for CreateCheckoutSession for application/json ContentType.
type CreateCheckoutSessionJSONRequestBody = CreateCheckoutSessionRequest

// CreateCustomerPortalSessionJSONRequestBody defines body for CreateCustomerPortalSession for application/json ContentType.
type CreateCustomerPortalSessionJSONRequestBody = CreateCustomerPortalRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all AI avatar videos
	// (GET /ai-avatar/videos)
	GetAIAvatarVideos(w http.ResponseWriter, r *http.Request)
	// Health check endpoint
	// (GET /health)
	GetHealth(w http.ResponseWriter, r *http.Request)
	// Get user's hooks
	// (GET /hooks)
	GetHooks(w http.ResponseWriter, r *http.Request, params GetHooksParams)
	// Generate hooks for TikTok slideshow
	// (POST /hooks/generate)
	GenerateHooks(w http.ResponseWriter, r *http.Request)
	// Delete a hook
	// (DELETE /hooks/{hookId})
	DeleteHook(w http.ResponseWriter, r *http.Request, hookId openapi_types.UUID)
	// Create Stripe checkout session
	// (POST /subscription/create-checkout-session)
	CreateCheckoutSession(w http.ResponseWriter, r *http.Request)
	// Create customer portal session
	// (POST /subscription/customer-portal)
	CreateCustomerPortalSession(w http.ResponseWriter, r *http.Request)
	// Get current user account
	// (GET /user)
	GetUserAccount(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAIAvatarVideos operation middleware
func (siw *ServerInterfaceWrapper) GetAIAvatarVideos(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAIAvatarVideos(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealth(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHooks operation middleware
func (siw *ServerInterfaceWrapper) GetHooks(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetHooksParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHooks(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GenerateHooks operation middleware
func (siw *ServerInterfaceWrapper) GenerateHooks(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GenerateHooks(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteHook operation middleware
func (siw *ServerInterfaceWrapper) DeleteHook(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "hookId" -------------
	var hookId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "hookId", r.PathValue("hookId"), &hookId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hookId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteHook(w, r, hookId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateCheckoutSession operation middleware
func (siw *ServerInterfaceWrapper) CreateCheckoutSession(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCheckoutSession(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateCustomerPortalSession operation middleware
func (siw *ServerInterfaceWrapper) CreateCustomerPortalSession(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCustomerPortalSession(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserAccount operation middleware
func (siw *ServerInterfaceWrapper) GetUserAccount(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserAccount(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/ai-avatar/videos", wrapper.GetAIAvatarVideos)
	m.HandleFunc("GET "+options.BaseURL+"/health", wrapper.GetHealth)
	m.HandleFunc("GET "+options.BaseURL+"/hooks", wrapper.GetHooks)
	m.HandleFunc("POST "+options.BaseURL+"/hooks/generate", wrapper.GenerateHooks)
	m.HandleFunc("DELETE "+options.BaseURL+"/hooks/{hookId}", wrapper.DeleteHook)
	m.HandleFunc("POST "+options.BaseURL+"/subscription/create-checkout-session", wrapper.CreateCheckoutSession)
	m.HandleFunc("POST "+options.BaseURL+"/subscription/customer-portal", wrapper.CreateCustomerPortalSession)
	m.HandleFunc("GET "+options.BaseURL+"/user", wrapper.GetUserAccount)

	return m
}
