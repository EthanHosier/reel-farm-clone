// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: videos.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const CreateVideo = `-- name: CreateVideo :one
INSERT INTO videos (
    title,
    description,
    filename,
    thumbnail_filename,
    duration,
    file_size
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, title, description, filename, thumbnail_filename, duration, file_size, created_at, updated_at
`

type CreateVideoParams struct {
	Title             string  `json:"title"`
	Description       *string `json:"description"`
	Filename          string  `json:"filename"`
	ThumbnailFilename string  `json:"thumbnail_filename"`
	Duration          *int32  `json:"duration"`
	FileSize          *int64  `json:"file_size"`
}

func (q *Queries) CreateVideo(ctx context.Context, arg *CreateVideoParams) (*Video, error) {
	row := q.db.QueryRow(ctx, CreateVideo,
		arg.Title,
		arg.Description,
		arg.Filename,
		arg.ThumbnailFilename,
		arg.Duration,
		arg.FileSize,
	)
	var i Video
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Filename,
		&i.ThumbnailFilename,
		&i.Duration,
		&i.FileSize,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const DeleteVideo = `-- name: DeleteVideo :exec
DELETE FROM videos
WHERE id = $1
`

func (q *Queries) DeleteVideo(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, DeleteVideo, id)
	return err
}

const GetAllVideos = `-- name: GetAllVideos :many
SELECT id, title, description, filename, thumbnail_filename, duration, file_size, created_at, updated_at FROM videos
ORDER BY created_at DESC
`

func (q *Queries) GetAllVideos(ctx context.Context) ([]*Video, error) {
	rows, err := q.db.Query(ctx, GetAllVideos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Video{}
	for rows.Next() {
		var i Video
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Filename,
			&i.ThumbnailFilename,
			&i.Duration,
			&i.FileSize,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetVideoByID = `-- name: GetVideoByID :one
SELECT id, title, description, filename, thumbnail_filename, duration, file_size, created_at, updated_at FROM videos
WHERE id = $1
`

func (q *Queries) GetVideoByID(ctx context.Context, id uuid.UUID) (*Video, error) {
	row := q.db.QueryRow(ctx, GetVideoByID, id)
	var i Video
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Filename,
		&i.ThumbnailFilename,
		&i.Duration,
		&i.FileSize,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const UpdateVideo = `-- name: UpdateVideo :one
UPDATE videos
SET 
    title = $2,
    description = $3,
    duration = $4,
    file_size = $5
WHERE id = $1
RETURNING id, title, description, filename, thumbnail_filename, duration, file_size, created_at, updated_at
`

type UpdateVideoParams struct {
	ID          uuid.UUID `json:"id"`
	Title       string    `json:"title"`
	Description *string   `json:"description"`
	Duration    *int32    `json:"duration"`
	FileSize    *int64    `json:"file_size"`
}

func (q *Queries) UpdateVideo(ctx context.Context, arg *UpdateVideoParams) (*Video, error) {
	row := q.db.QueryRow(ctx, UpdateVideo,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Duration,
		arg.FileSize,
	)
	var i Video
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Filename,
		&i.ThumbnailFilename,
		&i.Duration,
		&i.FileSize,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
