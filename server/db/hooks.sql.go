// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: hooks.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const CreateHook = `-- name: CreateHook :one
INSERT INTO public.hooks (user_id, generation_id, prompt, hook_text, hook_index, credits_used)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_id, generation_id, prompt, hook_text, hook_index, credits_used, created_at, updated_at
`

type CreateHookParams struct {
	UserID       pgtype.UUID `json:"user_id"`
	GenerationID pgtype.UUID `json:"generation_id"`
	Prompt       string      `json:"prompt"`
	HookText     string      `json:"hook_text"`
	HookIndex    int32       `json:"hook_index"`
	CreditsUsed  int32       `json:"credits_used"`
}

func (q *Queries) CreateHook(ctx context.Context, arg *CreateHookParams) (*Hook, error) {
	row := q.db.QueryRow(ctx, CreateHook,
		arg.UserID,
		arg.GenerationID,
		arg.Prompt,
		arg.HookText,
		arg.HookIndex,
		arg.CreditsUsed,
	)
	var i Hook
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GenerationID,
		&i.Prompt,
		&i.HookText,
		&i.HookIndex,
		&i.CreditsUsed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const CreateHooksBatch = `-- name: CreateHooksBatch :many
INSERT INTO public.hooks (user_id, generation_id, prompt, hook_text, hook_index, credits_used)
SELECT $1, $2, $3, unnest($4::text[]), unnest($5::int[]), $6
RETURNING id, user_id, generation_id, prompt, hook_text, hook_index, credits_used, created_at, updated_at
`

type CreateHooksBatchParams struct {
	UserID       pgtype.UUID `json:"user_id"`
	GenerationID pgtype.UUID `json:"generation_id"`
	Prompt       string      `json:"prompt"`
	Column4      []string    `json:"column_4"`
	Column5      []int32     `json:"column_5"`
	CreditsUsed  int32       `json:"credits_used"`
}

func (q *Queries) CreateHooksBatch(ctx context.Context, arg *CreateHooksBatchParams) ([]*Hook, error) {
	rows, err := q.db.Query(ctx, CreateHooksBatch,
		arg.UserID,
		arg.GenerationID,
		arg.Prompt,
		arg.Column4,
		arg.Column5,
		arg.CreditsUsed,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Hook{}
	for rows.Next() {
		var i Hook
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.GenerationID,
			&i.Prompt,
			&i.HookText,
			&i.HookIndex,
			&i.CreditsUsed,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const DeleteHook = `-- name: DeleteHook :exec
DELETE FROM public.hooks
WHERE id = $1 AND user_id = $2
`

type DeleteHookParams struct {
	ID     uuid.UUID   `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) DeleteHook(ctx context.Context, arg *DeleteHookParams) error {
	_, err := q.db.Exec(ctx, DeleteHook, arg.ID, arg.UserID)
	return err
}

const DeleteHooks = `-- name: DeleteHooks :many
DELETE FROM public.hooks
WHERE id = ANY($1::uuid[]) AND user_id = $2
RETURNING id, user_id, generation_id, prompt, hook_text, hook_index, credits_used, created_at, updated_at
`

type DeleteHooksParams struct {
	HookIds []pgtype.UUID `json:"hook_ids"`
	UserID  pgtype.UUID   `json:"user_id"`
}

// sqlc:arg hook_ids uuid[]
// sqlc:arg user_id uuid
func (q *Queries) DeleteHooks(ctx context.Context, arg *DeleteHooksParams) ([]*Hook, error) {
	rows, err := q.db.Query(ctx, DeleteHooks, arg.HookIds, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Hook{}
	for rows.Next() {
		var i Hook
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.GenerationID,
			&i.Prompt,
			&i.HookText,
			&i.HookIndex,
			&i.CreditsUsed,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetHookByID = `-- name: GetHookByID :one
SELECT id, user_id, generation_id, prompt, hook_text, hook_index, credits_used, created_at, updated_at FROM public.hooks
WHERE id = $1
`

func (q *Queries) GetHookByID(ctx context.Context, id uuid.UUID) (*Hook, error) {
	row := q.db.QueryRow(ctx, GetHookByID, id)
	var i Hook
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GenerationID,
		&i.Prompt,
		&i.HookText,
		&i.HookIndex,
		&i.CreditsUsed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const GetHooksByGeneration = `-- name: GetHooksByGeneration :many
SELECT id, user_id, generation_id, prompt, hook_text, hook_index, credits_used, created_at, updated_at FROM public.hooks
WHERE generation_id = $1
ORDER BY hook_index ASC
`

func (q *Queries) GetHooksByGeneration(ctx context.Context, generationID pgtype.UUID) ([]*Hook, error) {
	rows, err := q.db.Query(ctx, GetHooksByGeneration, generationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Hook{}
	for rows.Next() {
		var i Hook
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.GenerationID,
			&i.Prompt,
			&i.HookText,
			&i.HookIndex,
			&i.CreditsUsed,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetHooksByUser = `-- name: GetHooksByUser :many
SELECT id, user_id, generation_id, prompt, hook_text, hook_index, credits_used, created_at, updated_at FROM public.hooks
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetHooksByUserParams struct {
	UserID pgtype.UUID `json:"user_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

func (q *Queries) GetHooksByUser(ctx context.Context, arg *GetHooksByUserParams) ([]*Hook, error) {
	rows, err := q.db.Query(ctx, GetHooksByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Hook{}
	for rows.Next() {
		var i Hook
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.GenerationID,
			&i.Prompt,
			&i.HookText,
			&i.HookIndex,
			&i.CreditsUsed,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetUserHookCount = `-- name: GetUserHookCount :one
SELECT COUNT(*) FROM public.hooks
WHERE user_id = $1
`

func (q *Queries) GetUserHookCount(ctx context.Context, userID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, GetUserHookCount, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}
