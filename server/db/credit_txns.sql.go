// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: credit_txns.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const AtomicDebitCredits = `-- name: AtomicDebitCredits :one
UPDATE public.user_accounts
SET credits = credits - $2, updated_at = NOW()
WHERE id = $1 AND credits >= $2
RETURNING credits
`

type AtomicDebitCreditsParams struct {
	ID      uuid.UUID `json:"id"`
	Credits int32     `json:"credits"`
}

func (q *Queries) AtomicDebitCredits(ctx context.Context, arg *AtomicDebitCreditsParams) (int32, error) {
	row := q.db.QueryRow(ctx, AtomicDebitCredits, arg.ID, arg.Credits)
	var credits int32
	err := row.Scan(&credits)
	return credits, err
}

const CaptureCredits = `-- name: CaptureCredits :exec
UPDATE public.credit_txns
SET status = 'captured', updated_at = NOW()
WHERE id = $1 AND status = 'reserved'
`

func (q *Queries) CaptureCredits(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, CaptureCredits, id)
	return err
}

const GetStaleReservedTxns = `-- name: GetStaleReservedTxns :many
SELECT id, user_id, amount 
FROM public.credit_txns 
WHERE status = 'reserved' 
  AND created_at < NOW() - INTERVAL '10 minutes'
ORDER BY created_at ASC
`

type GetStaleReservedTxnsRow struct {
	ID     uuid.UUID   `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
	Amount int32       `json:"amount"`
}

func (q *Queries) GetStaleReservedTxns(ctx context.Context) ([]*GetStaleReservedTxnsRow, error) {
	rows, err := q.db.Query(ctx, GetStaleReservedTxns)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetStaleReservedTxnsRow{}
	for rows.Next() {
		var i GetStaleReservedTxnsRow
		if err := rows.Scan(&i.ID, &i.UserID, &i.Amount); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetTxnByRequestID = `-- name: GetTxnByRequestID :one
SELECT id, user_id, request_id, amount, status, created_at, updated_at 
FROM public.credit_txns 
WHERE request_id = $1
`

func (q *Queries) GetTxnByRequestID(ctx context.Context, requestID string) (*CreditTxn, error) {
	row := q.db.QueryRow(ctx, GetTxnByRequestID, requestID)
	var i CreditTxn
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RequestID,
		&i.Amount,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const GetTxnStatus = `-- name: GetTxnStatus :one
SELECT status FROM public.credit_txns WHERE id = $1
`

func (q *Queries) GetTxnStatus(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRow(ctx, GetTxnStatus, id)
	var status string
	err := row.Scan(&status)
	return status, err
}

const MarkTxnRefunded = `-- name: MarkTxnRefunded :exec
UPDATE public.credit_txns
SET status = 'refunded', updated_at = NOW()
WHERE id = $1
`

func (q *Queries) MarkTxnRefunded(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, MarkTxnRefunded, id)
	return err
}

const RefundCredits = `-- name: RefundCredits :exec
UPDATE public.user_accounts
SET credits = credits + $2, updated_at = NOW()
WHERE id = $1
`

type RefundCreditsParams struct {
	ID      uuid.UUID `json:"id"`
	Credits int32     `json:"credits"`
}

func (q *Queries) RefundCredits(ctx context.Context, arg *RefundCreditsParams) error {
	_, err := q.db.Exec(ctx, RefundCredits, arg.ID, arg.Credits)
	return err
}

const ReserveCredits = `-- name: ReserveCredits :one
INSERT INTO public.credit_txns (user_id, request_id, amount, status)
VALUES ($1, $2, $3, 'reserved')
ON CONFLICT (request_id) DO UPDATE
  SET updated_at = NOW()
RETURNING id, status
`

type ReserveCreditsParams struct {
	UserID    pgtype.UUID `json:"user_id"`
	RequestID string      `json:"request_id"`
	Amount    int32       `json:"amount"`
}

type ReserveCreditsRow struct {
	ID     uuid.UUID `json:"id"`
	Status string    `json:"status"`
}

func (q *Queries) ReserveCredits(ctx context.Context, arg *ReserveCreditsParams) (*ReserveCreditsRow, error) {
	row := q.db.QueryRow(ctx, ReserveCredits, arg.UserID, arg.RequestID, arg.Amount)
	var i ReserveCreditsRow
	err := row.Scan(&i.ID, &i.Status)
	return &i, err
}
