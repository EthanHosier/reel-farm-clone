// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user_generated_videos.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const CreateUserGeneratedVideo = `-- name: CreateUserGeneratedVideo :one
INSERT INTO user_generated_videos (
    id,
    user_id,
    ai_avatar_video_id,
    overlay_text,
    generated_video_filename,
    thumbnail_filename,
    status
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, user_id, ai_avatar_video_id, overlay_text, generated_video_filename, thumbnail_filename, status, error_message, created_at, updated_at
`

type CreateUserGeneratedVideoParams struct {
	ID                     uuid.UUID   `json:"id"`
	UserID                 pgtype.UUID `json:"user_id"`
	AiAvatarVideoID        pgtype.UUID `json:"ai_avatar_video_id"`
	OverlayText            string      `json:"overlay_text"`
	GeneratedVideoFilename string      `json:"generated_video_filename"`
	ThumbnailFilename      string      `json:"thumbnail_filename"`
	Status                 *string     `json:"status"`
}

func (q *Queries) CreateUserGeneratedVideo(ctx context.Context, arg *CreateUserGeneratedVideoParams) (*UserGeneratedVideo, error) {
	row := q.db.QueryRow(ctx, CreateUserGeneratedVideo,
		arg.ID,
		arg.UserID,
		arg.AiAvatarVideoID,
		arg.OverlayText,
		arg.GeneratedVideoFilename,
		arg.ThumbnailFilename,
		arg.Status,
	)
	var i UserGeneratedVideo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AiAvatarVideoID,
		&i.OverlayText,
		&i.GeneratedVideoFilename,
		&i.ThumbnailFilename,
		&i.Status,
		&i.ErrorMessage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const GetUserGeneratedVideoByID = `-- name: GetUserGeneratedVideoByID :one
SELECT id, user_id, ai_avatar_video_id, overlay_text, generated_video_filename, thumbnail_filename, status, error_message, created_at, updated_at FROM user_generated_videos WHERE id = $1
`

func (q *Queries) GetUserGeneratedVideoByID(ctx context.Context, id uuid.UUID) (*UserGeneratedVideo, error) {
	row := q.db.QueryRow(ctx, GetUserGeneratedVideoByID, id)
	var i UserGeneratedVideo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AiAvatarVideoID,
		&i.OverlayText,
		&i.GeneratedVideoFilename,
		&i.ThumbnailFilename,
		&i.Status,
		&i.ErrorMessage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const GetUserGeneratedVideosByUserID = `-- name: GetUserGeneratedVideosByUserID :many
SELECT id, user_id, ai_avatar_video_id, overlay_text, generated_video_filename, thumbnail_filename, status, error_message, created_at, updated_at FROM user_generated_videos WHERE user_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetUserGeneratedVideosByUserID(ctx context.Context, userID pgtype.UUID) ([]*UserGeneratedVideo, error) {
	rows, err := q.db.Query(ctx, GetUserGeneratedVideosByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*UserGeneratedVideo{}
	for rows.Next() {
		var i UserGeneratedVideo
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.AiAvatarVideoID,
			&i.OverlayText,
			&i.GeneratedVideoFilename,
			&i.ThumbnailFilename,
			&i.Status,
			&i.ErrorMessage,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateUserGeneratedVideoFilenames = `-- name: UpdateUserGeneratedVideoFilenames :one
UPDATE user_generated_videos 
SET generated_video_filename = $2, thumbnail_filename = $3, status = $4, updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, ai_avatar_video_id, overlay_text, generated_video_filename, thumbnail_filename, status, error_message, created_at, updated_at
`

type UpdateUserGeneratedVideoFilenamesParams struct {
	ID                     uuid.UUID `json:"id"`
	GeneratedVideoFilename string    `json:"generated_video_filename"`
	ThumbnailFilename      string    `json:"thumbnail_filename"`
	Status                 *string   `json:"status"`
}

func (q *Queries) UpdateUserGeneratedVideoFilenames(ctx context.Context, arg *UpdateUserGeneratedVideoFilenamesParams) (*UserGeneratedVideo, error) {
	row := q.db.QueryRow(ctx, UpdateUserGeneratedVideoFilenames,
		arg.ID,
		arg.GeneratedVideoFilename,
		arg.ThumbnailFilename,
		arg.Status,
	)
	var i UserGeneratedVideo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AiAvatarVideoID,
		&i.OverlayText,
		&i.GeneratedVideoFilename,
		&i.ThumbnailFilename,
		&i.Status,
		&i.ErrorMessage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const UpdateUserGeneratedVideoStatus = `-- name: UpdateUserGeneratedVideoStatus :one
UPDATE user_generated_videos 
SET status = $2, error_message = $3, updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, ai_avatar_video_id, overlay_text, generated_video_filename, thumbnail_filename, status, error_message, created_at, updated_at
`

type UpdateUserGeneratedVideoStatusParams struct {
	ID           uuid.UUID `json:"id"`
	Status       *string   `json:"status"`
	ErrorMessage *string   `json:"error_message"`
}

func (q *Queries) UpdateUserGeneratedVideoStatus(ctx context.Context, arg *UpdateUserGeneratedVideoStatusParams) (*UserGeneratedVideo, error) {
	row := q.db.QueryRow(ctx, UpdateUserGeneratedVideoStatus, arg.ID, arg.Status, arg.ErrorMessage)
	var i UserGeneratedVideo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AiAvatarVideoID,
		&i.OverlayText,
		&i.GeneratedVideoFilename,
		&i.ThumbnailFilename,
		&i.Status,
		&i.ErrorMessage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
