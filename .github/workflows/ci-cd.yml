name: CI/CD Pipeline

on:
  push:
    branches: [main]
    paths:
      - "server/**"
  pull_request:
    branches: [main]
    paths:
      - "server/**"

env:
  AWS_REGION: us-west-2
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.25.2"

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('server/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Generate API code
        run: make generate-api

      - name: Run tests
        run: go test -v ./...

      - name: Run go vet
        run: go vet ./...

      - name: Check formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            exit 1
          fi

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./server
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Update ECS service
        run: |
          # Update ECS service to use the new image
          aws ecs update-service \
            --cluster reel-farm-cluster \
            --service reel-farm-service \
            --force-new-deployment

      - name: Wait for deployment to complete
        run: |
          echo "Waiting for ECS service to stabilize..."
          aws ecs wait services-stable \
            --cluster reel-farm-cluster \
            --services reel-farm-service

      - name: Get ALB DNS name
        id: get-alb-dns
        run: |
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names reel-farm-alb \
            --query 'LoadBalancers[0].DNSName' \
            --output text)
          echo "alb-dns=$ALB_DNS" >> $GITHUB_OUTPUT
          echo "ALB DNS: $ALB_DNS"

      - name: Health check
        run: |
          ALB_DNS="${{ steps.get-alb-dns.outputs.alb-dns }}"
          echo "Performing health check on: http://$ALB_DNS/health"

          # Wait for ALB to be ready
          sleep 30

          # Perform health check with retries
          for i in {1..10}; do
            if curl -f http://$ALB_DNS/health; then
              echo "‚úÖ Health check passed!"
              exit 0
            else
              echo "‚ùå Health check failed (attempt $i/10)"
              sleep 10
            fi
          done

          echo "‚ùå Health check failed after 10 attempts"
          exit 1

      - name: Deployment success notification
        if: success()
        run: |
          echo "üéâ Deployment successful!"
          echo "Application is available at: http://${{ steps.get-alb-dns.outputs.alb-dns }}"
          echo "Health check: http://${{ steps.get-alb-dns.outputs.alb-dns }}/health"

      - name: Deployment failure notification
        if: failure()
        run: |
          echo "‚ùå Deployment failed!"
          echo "Check the logs above for details."
